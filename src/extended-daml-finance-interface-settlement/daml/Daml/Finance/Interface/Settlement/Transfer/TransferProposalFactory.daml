-- Copyright (c) 2024  Jose Velasco (kindofdev). All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Finance.Interface.Settlement.Transfer.TransferProposalFactory where

import DA.Set qualified as Set (notMember)

import Daml.Finance.Interface.Holding.Holding qualified as Holding (I)
import Daml.Finance.Interface.Settlement.DisclosureBatchFactory qualified as SettlementDisclosureBatchFactory (I)
import Daml.Finance.Interface.Settlement.Transfer.TransferProposal qualified as TransferProposal (I)
import Daml.Finance.Interface.Settlement.Transfer.Types
  ( PreAllocationApprovalOpType
  , TransferData(..)
  , TransferProposalFactoryKey(..)
  )
import Daml.Finance.Interface.Types.Common.Types (PartiesMap, Id, Parties)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure
  ( AddObservers(..)
  , I
  , RemoveObservers(..)
  , flattenObservers
  )
import Daml.Finance.Interface.Util.InterfaceKey
  ( createReferenceHelper
  , disclosureUpdateReferenceHelper
  , exerciseInterfaceByKeyHelper
  )
import Daml.Finance.Interface.Util.InterfaceKey qualified as InterfaceKey (HasInterfaceKey(..))


-- | Type synonym for `Factory`.
type I = Factory

-- | Type synonym for `Reference`. This type is currently used as a work-around given the lack of
-- interface keys.
type R = Reference

-- | Type synonym for `View`.
type V = View

-- | View for `Factory`.
data View = View
  with
    provider : Party
      -- ^ The provider of the `Factory`.
    id : Id
      -- ^ Identifier for the transfer proposal factory.
  deriving (Eq, Show)

-- | Convert the account's 'View' to its key.
toKey : View -> TransferProposalFactoryKey
toKey v = TransferProposalFactoryKey with provider = v.provider; id = v.id

-- | Retrieves the key of a `Factory`.
transferProposalFactoryKey : (HasToInterface i Factory) => i -> TransferProposalFactoryKey
transferProposalFactoryKey = toKey . view . toInterface @Factory

-- | An interface used to generate tranfer proposals.
interface Factory requires Disclosure.I where
  viewtype V

  getKey : TransferProposalFactoryKey
  create' : Create -> Update (ContractId TransferProposal.I, Optional (ContractId Holding.I))

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Create : (ContractId TransferProposal.I, Optional (ContractId Holding.I))
    -- ^ Creates a new `TransferProposal`.
    --   This choice creates a new `TransferProposal` contract, setting up the proposal details and optionally
    --   pre-allocating or pre-approving if desired.
    --   The result includes an optional disclosed holding in cases where the proposer has pre-allocated a holding.
    with
      proposer : Party
        -- ^ The party proposing the `TransferProposal` and instructing settlement.
      authorizers : Parties
        -- ^ The parties responsible for authorizing the `TransferProposal`.
      settlers : Parties
        -- ^ The parties responsible for settling the transfer.
      id : Id
        -- ^ A identifier for the `TransferProposal`.
      description : Text
        -- ^ A brief description providing context or details about the proposal.
      settlementTime : Optional Time
        -- ^ Settlement time (if any).
      transferData : TransferData
        -- ^ Data required for performing the transfer, including sender, receiver, quantity
        --   and the relationship between the sender, receiver, and any intermediary custodians.
      preAllocationApprovalOps : [PreAllocationApprovalOpType]
        -- ^ Optional pre-allocations and pre-approvals related to the transfer.
        --   The proposer may perform pre-allocation and pre-approval if they are a party involved
        --   in any of the instructions to be generated.
      extraBatchObservers : Parties
        -- ^ Additional parties observing the lifecycle of the `Batch` created for the transfer proposal.
      batchConsenters : Parties
        -- ^ Parties required to consent to the creation of the `Batch` for this transfer proposal.
      settlementFactoryCid : ContractId SettlementDisclosureBatchFactory.I
        -- ^ A `SettlementDisclosureBatchFactory` used to generate the necessary settlement batch and instructions.
    controller proposer
    do
      assertMsg "proposer cannot be an authorizer" $
        proposer `Set.notMember` authorizers
      create' this arg

  choice Remove : ()
    -- ^ Archive the factory.
    controller signatory this
    do
      (refCid, _) <- fetchByKey @Reference $ getKey this
      archive refCid


-- | HIDE
-- This template is used to key a TransferProposal Factory contract. It allows for looking up this contract
-- by key then acquiring the Factory contract by fetching its contract id on this contract. As
-- updates are made to a Factory, this Reference contract is required to be kept in sync.
template Reference
  with
    factoryView : View
      -- ^ The default view for factories.
    cid : ContractId Factory
      -- ^ The contract id of the factory.
    observers : PartiesMap
  where
    signatory factoryView.provider
    observer Disclosure.flattenObservers observers

    key toKey factoryView : TransferProposalFactoryKey
    maintainer key.provider

    nonconsuming choice GetCid : ContractId Factory
      -- ^ Get the `Factory`'s contract id.
      with
        viewer : Party
          -- ^ The party retrieving the reference.
      controller viewer
      do
        pure cid

    choice SetCid : ContractId Reference
      -- ^ Set the factory cid. This choice should be called only from `Factory` implementations.
      with
        newCid : ContractId Factory
          -- ^ The factory cid.
      controller signatory this
      do
        create this with cid = newCid

    choice SetObservers : ContractId Reference
      -- ^ Set observers. This choice should be called only from `Factory` implementations.
      with
        newObservers : PartiesMap
          -- ^ The new observers.
      controller signatory this
      do
        create this with observers = newObservers

-- | Create factory including reference.
createFactory : (HasCreate f, HasToInterface f Factory) => f -> Update (ContractId Factory)
createFactory factory = do
  cid <- toInterfaceContractId @Factory <$> create factory
  createReference (view $ toInterface @Factory factory).provider cid
  pure cid

-- | Disclose factory.
disclose : (Text, Parties) -> Party -> Parties -> TransferProposalFactoryKey -> Update (ContractId Factory)
disclose observersToAdd actor disclosers factory =
  fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      factory
      actor
      Disclosure.AddObservers with disclosers; observersToAdd

-- | Undisclose factory.
undisclose
  : (Text, Parties)
  -> Party
  -> Parties
  -> TransferProposalFactoryKey
  -> Update (Optional (ContractId Factory))
undisclose observersToRemove actor disclosers factory =
  fmap fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      factory
      actor
      Disclosure.RemoveObservers with disclosers; observersToRemove

-- | Exercise interface by key.
-- This method can be used to exercise a choice on a `Factory` given its `TransferProposalFactory`.
-- Requires as input the `TransferProposalFactory`, the actor exercising the choice, and the choice
-- arguments. For example:
-- ```
-- exerciseInterfaceByKey @TransferProposalFactory.I TransferProposalFactory actor
--   TransferProposalFactory.Create with ..
-- ```
exerciseInterfaceByKey : forall i c r.
  ( HasInterfaceTypeRep i
  , HasExercise i c r
  )
  => TransferProposalFactoryKey -- ^ The factory key.
  -> Party                      -- ^ The actor exercising.
  -> c                          -- ^ The choice arguments.
  -> Update r
exerciseInterfaceByKey k actor arg =
  exerciseInterfaceByKeyHelper @Reference @GetCid @SetCid @SetObservers @GetView @i k actor arg

-- | HIDE
-- Create instance of HasInterfaceKey.
instance InterfaceKey.HasInterfaceKey Factory View TransferProposalFactoryKey Reference GetCid SetCid
  SetObservers GetView where
    createReference = Reference
    getCid = GetCid
    setCid = SetCid
    setObservers = SetObservers
    getView = GetView

-- | HIDE
-- Create Reference for the factory.
createReference : Party -> ContractId Factory -> Update (ContractId Reference)
createReference = createReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView

-- | HIDE
-- Update the factory reference once observers are added to the factory.
disclosureUpdateReference
  : TransferProposalFactoryKey
  -> PartiesMap
  -> ContractId Factory
  -> Update (ContractId Disclosure.I)
disclosureUpdateReference =
  disclosureUpdateReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView
