-- Copyright (c) 2024  Jose Velasco (kindofdev). All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Transfer.SettlementFactory where

import DA.List (mapAccumL)
import DA.Map (fromList)
import Daml.Finance.Interface.Settlement.DisclosureBatchFactory qualified as DisclosureBatchFactory (I, Instruct(..), View(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), Parties)
import Daml.Finance.Settlement.Transfer.Batch (Batch(..))
import Daml.Finance.Settlement.Transfer.Instruction (Instruction(..))


-- | Factory template that implements the `Factory` interface.
-- It is used to create a set of settlement `Instruction`\s, and a `Batch` to atomically settle
-- them.
template Factory
  with
    provider : Party
      -- ^ Party providing the facility.
    observers : Parties
      -- ^ Observers.
  where
    signatory provider
    observer observers

    interface instance DisclosureBatchFactory.I for Factory where
      view = DisclosureBatchFactory.View with provider; observers
      instruct DisclosureBatchFactory.Instruct {instructor; consenters; settlers; id; description;
        contextId; routedSteps; settlementTime} = do
          let
            createInstruction index routedStep =
              ( index + 1,
                Instruction with
                  instructor
                  consenters
                  settlers
                  batchId = id
                  id = Id (show index)
                  routedStep
                  settlementTime
                  allocation = Unallocated
                  approval = Unapproved
                  signedSenders = mempty
                  signedReceivers = mempty
                  observers = fromList [(show id, settlers)]
              )
            instructions = snd $ mapAccumL createInstruction 0 routedSteps
            instructionIds = map (.id) instructions
          instructionCids <- mapA (fmap toInterfaceContractId . create) instructions
          batchCid <- toInterfaceContractId <$>
            create Batch with
              instructor
              consenters
              settlers
              id
              description
              contextId
              routedStepsWithInstructionId = zip routedSteps instructionIds
              settlementTime
              observers = mempty
          pure (batchCid, instructionCids)
